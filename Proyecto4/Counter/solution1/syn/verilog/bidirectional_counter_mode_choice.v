// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bidirectional_counter_mode_choice (
        ap_clk,
        ap_rst,
        reset,
        enable,
        mode,
        counter_out_i,
        counter_out_o,
        counter_out_i_ap_vld,
        counter_out_o_ap_vld,
        bidirectional_counter_count_V_i,
        bidirectional_counter_count_V_o,
        bidirectional_counter_count_V_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;


input   ap_clk;
input   ap_rst;
input   reset;
input   enable;
input   mode;
input  [11:0] counter_out_i;
output  [11:0] counter_out_o;
input   counter_out_i_ap_vld;
output   counter_out_o_ap_vld;
input  [11:0] bidirectional_counter_count_V_i;
output  [11:0] bidirectional_counter_count_V_o;
output   bidirectional_counter_count_V_o_ap_vld;

reg[11:0] counter_out_o;
reg counter_out_o_ap_vld;
reg[11:0] bidirectional_counter_count_V_o;
reg bidirectional_counter_count_V_o_ap_vld;

wire   [0:0] grp_read_fu_68_p2;
wire   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_1_read_fu_74_p2;
wire   [0:0] tmp_2_read_fu_80_p2;
reg    ap_predicate_op29_read_state1;
reg    ap_predicate_op41_read_state1;
reg    ap_block_state1;
wire   [11:0] v_V_2_fu_114_p2;
wire   [11:0] v_V_fu_122_p2;
reg   [0:0] ap_NS_fsm;

always @ (*) begin
    if ((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op41_read_state1 == 1'b1))) begin
        bidirectional_counter_count_V_o = v_V_fu_122_p2;
    end else if ((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op29_read_state1 == 1'b1))) begin
        bidirectional_counter_count_V_o = v_V_2_fu_114_p2;
    end else if (((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)))) begin
        bidirectional_counter_count_V_o = 12'd0;
    end else begin
        bidirectional_counter_count_V_o = bidirectional_counter_count_V_i;
    end
end

always @ (*) begin
    if (((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op41_read_state1 == 1'b1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op29_read_state1 == 1'b1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)))) begin
        bidirectional_counter_count_V_o_ap_vld = 1'b1;
    end else begin
        bidirectional_counter_count_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op41_read_state1 == 1'b1))) begin
        counter_out_o = v_V_fu_122_p2;
    end else if ((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op29_read_state1 == 1'b1))) begin
        counter_out_o = v_V_2_fu_114_p2;
    end else if (((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)))) begin
        counter_out_o = 12'd0;
    end else begin
        counter_out_o = counter_out_i;
    end
end

always @ (*) begin
    if (((~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op41_read_state1 == 1'b1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op29_read_state1 == 1'b1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)) | (~(((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1))) & (tmp_2_read_fu_80_p2 == 1'd0) & (tmp_1_read_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (grp_read_fu_68_p2 == 1'd1)))) begin
        counter_out_o_ap_vld = 1'b1;
    end else begin
        counter_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm = ap_ST_fsm_state1;

assign ap_CS_fsm_state1 = ap_ST_fsm_state1[32'd0];

always @ (*) begin
    ap_block_state1 = (((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op41_read_state1 == 1'b1)) | ((counter_out_i_ap_vld == 1'b0) & (ap_predicate_op29_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op29_read_state1 = ((tmp_1_read_fu_74_p2 == 1'd0) & (tmp_2_read_fu_80_p2 == 1'd1) & (grp_read_fu_68_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op41_read_state1 = ((tmp_2_read_fu_80_p2 == 1'd1) & (tmp_1_read_fu_74_p2 == 1'd1) & (grp_read_fu_68_p2 == 1'd1));
end

assign grp_read_fu_68_p2 = enable;

assign tmp_1_read_fu_74_p2 = mode;

assign tmp_2_read_fu_80_p2 = reset;

assign v_V_2_fu_114_p2 = ($signed(bidirectional_counter_count_V_i) + $signed(12'd4095));

assign v_V_fu_122_p2 = (bidirectional_counter_count_V_i + 12'd1);

endmodule //bidirectional_counter_mode_choice
