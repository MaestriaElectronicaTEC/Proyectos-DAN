// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "bidirectional_counter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bidirectional_counter::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> bidirectional_counter::ap_const_lv1_0 = "0";
const sc_lv<32> bidirectional_counter::ap_const_lv32_1 = "1";
const sc_lv<1> bidirectional_counter::ap_const_lv1_1 = "1";
const sc_lv<2> bidirectional_counter::ap_const_lv2_0 = "00";
const sc_logic bidirectional_counter::ap_const_logic_0 = sc_dt::Log_0;
const bool bidirectional_counter::ap_const_boolean_1 = true;

bidirectional_counter::bidirectional_counter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    StgValue_12_bidirectional_counter_mode_choice_fu_52 = new bidirectional_counter_mode_choice("StgValue_12_bidirectional_counter_mode_choice_fu_52");
    StgValue_12_bidirectional_counter_mode_choice_fu_52->ap_clk(clock);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->ap_rst(ap_rst);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->reset(reset);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->enable(enable);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->mode(mode);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->counter_out_i(counter_out_i);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->counter_out_o(StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->counter_out_i_ap_vld(ap_var_for_const0);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->counter_out_o_ap_vld(StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->bidirectional_counter_count_V_i(bidirectional_counter_count_V);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->bidirectional_counter_count_V_o(StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o);
    StgValue_12_bidirectional_counter_mode_choice_fu_52->bidirectional_counter_count_V_o_ap_vld(StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld);

    SC_METHOD(thread_bidirectional_counter_count_V);
    dont_initialize();
    sensitive << ( clock.pos() );

    SC_METHOD(thread_counter_out_o);
    dont_initialize();
    sensitive << ( clock.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_bidirectional_counte_load_fu_68_p1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bidirectional_counter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clock, "(port)clock");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, enable, "(port)enable");
    sc_trace(mVcdFile, mode, "(port)mode");
    sc_trace(mVcdFile, counter_out_i, "(port)counter_out_i");
    sc_trace(mVcdFile, counter_out_o, "(port)counter_out_o");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, bidirectional_counte_load_fu_68_p1, "bidirectional_counte_load_fu_68_p1");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o, "StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o");
    sc_trace(mVcdFile, StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld, "StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld");
    sc_trace(mVcdFile, StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o, "StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o");
    sc_trace(mVcdFile, StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld, "StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, bidirectional_counter_count_V, "bidirectional_counter_count_V");
#endif

    }
    mHdltvinHandle.open("bidirectional_counter.hdltvin.dat");
    mHdltvoutHandle.open("bidirectional_counter.hdltvout.dat");
}

bidirectional_counter::~bidirectional_counter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete StgValue_12_bidirectional_counter_mode_choice_fu_52;
}

void bidirectional_counter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void bidirectional_counter::thread_bidirectional_counter_count_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld.read())) {
        bidirectional_counter_count_V = StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o.read();
    }
}

void bidirectional_counter::thread_counter_out_o() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld.read())) {
        counter_out_o = StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o.read();
    } else {
        counter_out_o = counter_out_i.read();
    }
}

void bidirectional_counter::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void bidirectional_counter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void bidirectional_counter::thread_bidirectional_counte_load_fu_68_p1() {
    bidirectional_counte_load_fu_68_p1 = ap_const_lv1_0;
}

void bidirectional_counter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"enable\" :  \"" << enable.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode\" :  \"" << mode.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"counter_out_i\" :  \"" << counter_out_i.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"counter_out_o\" :  \"" << counter_out_o.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

