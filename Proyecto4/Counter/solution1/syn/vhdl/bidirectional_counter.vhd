-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bidirectional_counter is
port (
    clock : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    enable : IN STD_LOGIC;
    mode : IN STD_LOGIC;
    counter_out_i : IN STD_LOGIC_VECTOR (11 downto 0);
    counter_out_o : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_rst : IN STD_LOGIC );
end;


architecture behav of bidirectional_counter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bidirectional_counter,hls_ip_2018_2,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.547000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=81,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal bidirectional_counte_load_fu_68_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o : STD_LOGIC_VECTOR (11 downto 0);
    signal StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld : STD_LOGIC;
    signal StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o : STD_LOGIC_VECTOR (11 downto 0);
    signal StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bidirectional_counter_count_V : STD_LOGIC_VECTOR (11 downto 0);

    component bidirectional_counter_mode_choice IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        enable : IN STD_LOGIC;
        mode : IN STD_LOGIC;
        counter_out_i : IN STD_LOGIC_VECTOR (11 downto 0);
        counter_out_o : OUT STD_LOGIC_VECTOR (11 downto 0);
        counter_out_i_ap_vld : IN STD_LOGIC;
        counter_out_o_ap_vld : OUT STD_LOGIC;
        bidirectional_counter_count_V_i : IN STD_LOGIC_VECTOR (11 downto 0);
        bidirectional_counter_count_V_o : OUT STD_LOGIC_VECTOR (11 downto 0);
        bidirectional_counter_count_V_o_ap_vld : OUT STD_LOGIC );
    end component;



begin
    StgValue_12_bidirectional_counter_mode_choice_fu_52 : component bidirectional_counter_mode_choice
    port map (
        ap_clk => clock,
        ap_rst => ap_rst,
        reset => reset,
        enable => enable,
        mode => mode,
        counter_out_i => counter_out_i,
        counter_out_o => StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o,
        counter_out_i_ap_vld => ap_const_logic_1,
        counter_out_o_ap_vld => StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld,
        bidirectional_counter_count_V_i => bidirectional_counter_count_V,
        bidirectional_counter_count_V_o => StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o,
        bidirectional_counter_count_V_o_ap_vld => StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld);





    bidirectional_counter_count_V_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o_ap_vld)) then 
                bidirectional_counter_count_V <= StgValue_12_bidirectional_counter_mode_choice_fu_52_bidirectional_counter_count_V_o;
            end if; 
        end if;
    end process;


    counter_out_o_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o_ap_vld)) then 
                counter_out_o <= StgValue_12_bidirectional_counter_mode_choice_fu_52_counter_out_o;
            else 
                counter_out_o <= counter_out_i;
            end if; 
        end if;
    end process;

    ap_CS_fsm <= ap_const_lv2_0;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    bidirectional_counte_load_fu_68_p1 <= ap_const_lv1_0;
end behav;
