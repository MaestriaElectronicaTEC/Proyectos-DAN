	.file	"../Proyecto1/StateMachine/StateMachine.cpp"
	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2:
	.cfi_def_cfa_offset 16
.Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZStL8__ioinit, %rdi
	callq	_ZNSt8ios_base4InitC1Ev
	leaq	_ZNSt8ios_base4InitD1Ev, %rdi
	leaq	_ZStL8__ioinit, %rax
	leaq	__dso_handle, %rdx
	movq	%rax, %rsi
	callq	__cxa_atexit
	movl	%eax, -4(%rbp)          # 4-byte Spill
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp5:
	.size	__cxx_global_var_init, .Ltmp5-__cxx_global_var_init
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,"axG",@progbits,_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,comdat
	.weak	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,@function
_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi: # @_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movl	%edx, -20(%rsp)
	ret
.Ltmp6:
	.size	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi, .Ltmp6-_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init1,@function
__cxx_global_var_init1:                 # @__cxx_global_var_init1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZN7sc_coreL17api_version_checkE, %rax
	xorl	%esi, %esi
	movl	$_ZN7sc_coreL17api_version_checkE, %edi
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	_ZN7sc_core20sc_api_version_2_3_1IXadL_ZNS_34SC_DISABLE_VIRTUAL_BIND_UNDEFINED_EEEEC1ENS_16sc_writer_policyE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp12:
	.size	__cxx_global_var_init1, .Ltmp12-__cxx_global_var_init1
	.cfi_endproc

	.text
	.globl	_ZN12StateMachine12getNextStateEv
	.align	16, 0x90
	.type	_ZN12StateMachine12getNextStateEv,@function
_ZN12StateMachine12getNextStateEv:      # @_ZN12StateMachine12getNextStateEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp15:
	.cfi_def_cfa_offset 16
.Ltmp16:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp17:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
	addq	$664, %rax              # imm = 0x298
	movq	%rdi, %rcx
	addq	$512, %rcx              # imm = 0x200
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_intILi12EEaSERKS1_
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt11sc_int_basecvxEv
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %rsi
	cmpq	$4, %rax
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	ja	.LBB3_27
# BB#28:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	.LJTI3_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB3_1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$97, %ecx
	jne	.LBB3_3
# BB#2:
	movl	$1, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB3_6
.LBB3_3:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$98, %ecx
	jne	.LBB3_5
# BB#4:
	movl	$2, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB3_5:
	jmp	.LBB3_6
.LBB3_6:
	jmp	.LBB3_27
.LBB3_7:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$98, %ecx
	jne	.LBB3_9
# BB#8:
	movl	$3, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB3_10
.LBB3_9:
	movl	$1, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB3_10:
	jmp	.LBB3_27
.LBB3_11:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$97, %ecx
	jne	.LBB3_13
# BB#12:
	movl	$1, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB3_14
.LBB3_13:
	movl	$2, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB3_14:
	jmp	.LBB3_27
.LBB3_15:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$97, %ecx
	jne	.LBB3_17
# BB#16:
	movl	$1, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB3_20
.LBB3_17:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$98, %ecx
	jne	.LBB3_19
# BB#18:
	movl	$4, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB3_19:
	jmp	.LBB3_20
.LBB3_20:
	jmp	.LBB3_27
.LBB3_21:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$97, %ecx
	jne	.LBB3_23
# BB#22:
	movl	$1, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB3_26
.LBB3_23:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIcEcvRKcEv
	movsbl	(%rax), %ecx
	cmpl	$98, %ecx
	jne	.LBB3_25
# BB#24:
	movl	$2, %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$664, %rax              # imm = 0x298
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi12EEaSEi
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB3_25:
	jmp	.LBB3_26
.LBB3_26:
	jmp	.LBB3_27
.LBB3_27:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$512, %rax              # imm = 0x200
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addq	$664, %rcx              # imm = 0x298
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_
	addq	$128, %rsp
	popq	%rbp
	ret
.Ltmp18:
	.size	_ZN12StateMachine12getNextStateEv, .Ltmp18-_ZN12StateMachine12getNextStateEv
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI3_0:
	.quad	.LBB3_1
	.quad	.LBB3_7
	.quad	.LBB3_11
	.quad	.LBB3_15
	.quad	.LBB3_21

	.section	.text._ZN5sc_dt6sc_intILi12EEaSERKS1_,"axG",@progbits,_ZN5sc_dt6sc_intILi12EEaSERKS1_,comdat
	.weak	_ZN5sc_dt6sc_intILi12EEaSERKS1_
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi12EEaSERKS1_,@function
_ZN5sc_dt6sc_intILi12EEaSERKS1_:        # @_ZN5sc_dt6sc_intILi12EEaSERKS1_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, 8(%rsi)
	movq	%rsi, %rax
	ret
.Ltmp19:
	.size	_ZN5sc_dt6sc_intILi12EEaSERKS1_, .Ltmp19-_ZN5sc_dt6sc_intILi12EEaSERKS1_
	.cfi_endproc

	.section	.text._ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv,"axG",@progbits,_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv,comdat
	.weak	_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv,@function
_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv: # @_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp22:
	.cfi_def_cfa_offset 16
.Ltmp23:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp24:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	movq	%rax, %rdi
	movq	(%rax), %rax
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp25:
	.size	_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv, .Ltmp25-_ZNK7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE4readEv
	.cfi_endproc

	.section	.text._ZNK5sc_dt11sc_int_basecvxEv,"axG",@progbits,_ZNK5sc_dt11sc_int_basecvxEv,comdat
	.weak	_ZNK5sc_dt11sc_int_basecvxEv
	.align	16, 0x90
	.type	_ZNK5sc_dt11sc_int_basecvxEv,@function
_ZNK5sc_dt11sc_int_basecvxEv:           # @_ZNK5sc_dt11sc_int_basecvxEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp26:
	.size	_ZNK5sc_dt11sc_int_basecvxEv, .Ltmp26-_ZNK5sc_dt11sc_int_basecvxEv
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIcEcvRKcEv,"axG",@progbits,_ZNK7sc_core5sc_inIcEcvRKcEv,comdat
	.weak	_ZNK7sc_core5sc_inIcEcvRKcEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIcEcvRKcEv,@function
_ZNK7sc_core5sc_inIcEcvRKcEv:           # @_ZNK7sc_core5sc_inIcEcvRKcEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp29:
	.cfi_def_cfa_offset 16
.Ltmp30:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp31:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp32:
	.size	_ZNK7sc_core5sc_inIcEcvRKcEv, .Ltmp32-_ZNK7sc_core5sc_inIcEcvRKcEv
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi12EEaSEi,"axG",@progbits,_ZN5sc_dt6sc_intILi12EEaSEi,comdat
	.weak	_ZN5sc_dt6sc_intILi12EEaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi12EEaSEi,@function
_ZN5sc_dt6sc_intILi12EEaSEi:            # @_ZN5sc_dt6sc_intILi12EEaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp35:
	.cfi_def_cfa_offset 16
.Ltmp36:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp37:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movl	-12(%rbp), %esi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt11sc_int_baseaSEi
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp38:
	.size	_ZN5sc_dt6sc_intILi12EEaSEi, .Ltmp38-_ZN5sc_dt6sc_intILi12EEaSEi
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_,@function
_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_: # @_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp41:
	.cfi_def_cfa_offset 16
.Ltmp42:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp43:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp44:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_, .Ltmp44-_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi12EEEE5writeERKS3_
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD1Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD1Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD1Ev,@function
_ZN7sc_core18sc_process_monitorD1Ev:    # @_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp47:
	.cfi_def_cfa_offset 16
.Ltmp48:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp49:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core18sc_process_monitorD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp50:
	.size	_ZN7sc_core18sc_process_monitorD1Ev, .Ltmp50-_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD0Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD0Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD0Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD0Ev,@function
_ZN7sc_core18sc_process_monitorD0Ev:    # @_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin11:
	.cfi_lsda 3, .Lexception11
# BB#0:
	pushq	%rbp
.Ltmp56:
	.cfi_def_cfa_offset 16
.Ltmp57:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp58:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp51:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core18sc_process_monitorD1Ev
.Ltmp52:
	jmp	.LBB11_1
.LBB11_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB11_2:
.Ltmp53:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp59:
	.size	_ZN7sc_core18sc_process_monitorD0Ev, .Ltmp59-_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_endproc
.Leh_func_end11:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table11:
.Lexception11:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset0 = .Ltmp51-.Leh_func_begin11      # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp52-.Ltmp51                #   Call between .Ltmp51 and .Ltmp52
	.long	.Lset1
.Lset2 = .Ltmp53-.Leh_func_begin11      #     jumps to .Ltmp53
	.long	.Lset2
	.byte	0                       #   On action: cleanup
.Lset3 = .Ltmp52-.Leh_func_begin11      # >> Call Site 2 <<
	.long	.Lset3
.Lset4 = .Leh_func_end11-.Ltmp52        #   Call between .Ltmp52 and .Leh_func_end11
	.long	.Lset4
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp62:
	.cfi_def_cfa_offset 16
.Ltmp63:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp64:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB12_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB12_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp65:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv, .Ltmp65-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_baseaSEi,"axG",@progbits,_ZN5sc_dt11sc_int_baseaSEi,comdat
	.weak	_ZN5sc_dt11sc_int_baseaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_baseaSEi,@function
_ZN5sc_dt11sc_int_baseaSEi:             # @_ZN5sc_dt11sc_int_baseaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp68:
	.cfi_def_cfa_offset 16
.Ltmp69:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp70:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movslq	-12(%rbp), %rax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt11sc_int_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp71:
	.size	_ZN5sc_dt11sc_int_baseaSEi, .Ltmp71-_ZN5sc_dt11sc_int_baseaSEi
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_base11extend_signEv,"axG",@progbits,_ZN5sc_dt11sc_int_base11extend_signEv,comdat
	.weak	_ZN5sc_dt11sc_int_base11extend_signEv
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_base11extend_signEv,@function
_ZN5sc_dt11sc_int_base11extend_signEv:  # @_ZN5sc_dt11sc_int_base11extend_signEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	shlq	%cl, %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	sarq	%cl, %rax
	movq	%rax, 8(%rdi)
	ret
.Ltmp72:
	.size	_ZN5sc_dt11sc_int_base11extend_signEv, .Ltmp72-_ZN5sc_dt11sc_int_base11extend_signEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp75:
	.cfi_def_cfa_offset 16
.Ltmp76:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp77:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB15_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB15_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp78:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv, .Ltmp78-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIcEEEptEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp81:
	.cfi_def_cfa_offset 16
.Ltmp82:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp83:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB16_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB16_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp84:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv, .Ltmp84-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi12EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD2Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD2Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD2Ev,@function
_ZN7sc_core18sc_process_monitorD2Ev:    # @_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp85:
	.size	_ZN7sc_core18sc_process_monitorD2Ev, .Ltmp85-_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	_GLOBAL__I_a,@function
_GLOBAL__I_a:                           # @_GLOBAL__I_a
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp88:
	.cfi_def_cfa_offset 16
.Ltmp89:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp90:
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	callq	__cxx_global_var_init1
	popq	%rbp
	ret
.Ltmp91:
	.size	_GLOBAL__I_a, .Ltmp91-_GLOBAL__I_a
	.cfi_endproc

	.type	_ZStL8__ioinit,@object  # @_ZStL8__ioinit
	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.type	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE,@object # @_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE
	.section	.rodata,"a",@progbits
_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE:
	.byte	1                       # 0x1
	.size	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE, 1

	.type	_ZN7sc_coreL17api_version_checkE,@object # @_ZN7sc_coreL17api_version_checkE
	.local	_ZN7sc_coreL17api_version_checkE
	.comm	_ZN7sc_coreL17api_version_checkE,1,1
	.type	_ZTVN7sc_core18sc_process_monitorE,@object # @_ZTVN7sc_core18sc_process_monitorE
	.section	.rodata._ZTVN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTVN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTVN7sc_core18sc_process_monitorE
	.align	16
_ZTVN7sc_core18sc_process_monitorE:
	.quad	0
	.quad	_ZTIN7sc_core18sc_process_monitorE
	.quad	_ZN7sc_core18sc_process_monitorD1Ev
	.quad	_ZN7sc_core18sc_process_monitorD0Ev
	.quad	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.size	_ZTVN7sc_core18sc_process_monitorE, 40

	.type	_ZTSN7sc_core18sc_process_monitorE,@object # @_ZTSN7sc_core18sc_process_monitorE
	.section	.rodata._ZTSN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTSN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTSN7sc_core18sc_process_monitorE
	.align	16
_ZTSN7sc_core18sc_process_monitorE:
	.asciz	 "N7sc_core18sc_process_monitorE"
	.size	_ZTSN7sc_core18sc_process_monitorE, 31

	.type	_ZTIN7sc_core18sc_process_monitorE,@object # @_ZTIN7sc_core18sc_process_monitorE
	.section	.rodata._ZTIN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTIN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTIN7sc_core18sc_process_monitorE
	.align	8
_ZTIN7sc_core18sc_process_monitorE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_process_monitorE
	.size	_ZTIN7sc_core18sc_process_monitorE, 16

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	 "port is not bound"
	.size	.L.str, 18

	.section	.ctors,"aw",@progbits
	.align	8
	.quad	_GLOBAL__I_a

	.section	".note.GNU-stack","",@progbits
