// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="StateMachine,hls_ip_2018_2,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.551700,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=137,HLS_VERSION=2018_2}" *)

module StateMachine (
        clock,
        key,
        current_state_i,
        current_state_o,
        ap_rst
);


input   clock;
input  [7:0] key;
input  [11:0] current_state_i;
output  [11:0] current_state_o;
input   ap_rst;

reg[11:0] current_state_o;

wire   [0:0] StateMachine_ssdm_load_fu_56_p1;
wire   [1:0] ap_CS_fsm;
wire   [11:0] grp_StateMachine_getNextState_fu_44_current_state_o;
wire    grp_StateMachine_getNextState_fu_44_current_state_o_ap_vld;
wire   [11:0] grp_StateMachine_getNextState_fu_44_StateMachine_state_V;
wire    grp_StateMachine_getNextState_fu_44_StateMachine_state_V_ap_vld;
wire    ap_CS_fsm_state2;

StateMachine_getNextState grp_StateMachine_getNextState_fu_44(
    .ap_clk(clock),
    .ap_rst(ap_rst),
    .key(key),
    .current_state_i(current_state_i),
    .current_state_i_ap_vld(1'b1),
    .current_state_o(grp_StateMachine_getNextState_fu_44_current_state_o),
    .current_state_o_ap_vld(grp_StateMachine_getNextState_fu_44_current_state_o_ap_vld),
    .StateMachine_state_V(grp_StateMachine_getNextState_fu_44_StateMachine_state_V),
    .StateMachine_state_V_ap_vld(grp_StateMachine_getNextState_fu_44_StateMachine_state_V_ap_vld)
);

always @ (posedge clock) begin
    if ((grp_StateMachine_getNextState_fu_44_current_state_o_ap_vld == 1'b1)) begin
        current_state_o <= grp_StateMachine_getNextState_fu_44_current_state_o;
    end else begin
        current_state_o <= current_state_i;
    end
end

assign StateMachine_ssdm_load_fu_56_p1 = 1'd0;

assign ap_CS_fsm = 2'd0;

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

endmodule //StateMachine
